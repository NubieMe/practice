// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator dbml {
  provider            = "prisma-dbml-generator"
  outputName          = "schema.dbml"
  projectName         = "Marketplace"
  projectDatabaseType = "PostgreSQL"
  previewFeatures     = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [citext(map: "citext")]
}

model users {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @updatedAt @db.Timestamp(6)

  fullname     String       @db.VarChar()
  email        String       @unique @db.VarChar()
  password     String       @db.VarChar()
  country_code String
  phone        String       @unique @db.VarChar()
  status       Verification @default(Unverified)
  otp          String?      @db.VarChar()
  role         Roles

  // wishlists wishlists[]
  todos todos[]
}

model todos {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @updatedAt @db.Timestamp(6)

  title  String   @db.VarChar()
  todo   String[] @db.Text
  check  String[] @db.VarChar()
  images String[] @db.VarChar()

  user_id String

  user users @relation(references: [id], fields: [user_id], onUpdate: NoAction, onDelete: NoAction)
}

// model addresses {
//   id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   created_at DateTime @default(now()) @db.Timestamp(6)
//   updated_at DateTime @updatedAt @db.Timestamp(6)

//   name     String  @db.VarChar()
//   selected Boolean @default(false)
//   address  String  @db.Text
// }

// model categories {
//   id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   created_at DateTime @default(now()) @db.Timestamp(6)
//   updated_at DateTime @updatedAt @db.Timestamp(6)

//   name        String  @db.VarChar()
//   description String? @db.VarChar()
//   parent_id   String? @db.VarChar()

//   parent   categories?  @relation("categoriesToCategories", references: [id], fields: [parent_id], onUpdate: NoAction, onDelete: NoAction)
//   children categories[] @relation("categoriesToCategories")
// }

// model products {
//   id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   created_at DateTime @default(now()) @db.Timestamp(6)
//   updated_at DateTime @updatedAt @db.Timestamp(6)

//   name        String @db.VarChar()
//   price       Int
//   description String @db.Text
//   stock       Int
//   weight      Int

//   wishlists    wishlists[]
//   carts        carts[]
//   trx_products trx_products[]
//   images       images[]
// }

// model images {
//   id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   created_at DateTime @default(now()) @db.Timestamp(6)
//   updated_at DateTime @updatedAt @db.Timestamp(6)

//   name String @db.VarChar()

//   product_id String @db.VarChar()
//   variant_id String @db.VarChar()

//   product      products       @relation(references: [id], fields: [product_id], onUpdate: NoAction, onDelete: NoAction)
//   variant      variants       @relation(references: [id], fields: [variant_id], onUpdate: NoAction, onDelete: NoAction)
//   trx_products trx_products[]
// }

// model variants {
//   id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   created_at DateTime @default(now()) @db.Timestamp(6)
//   updated_at DateTime @updatedAt @db.Timestamp(6)

//   name   String @db.VarChar()
//   weight Int?
//   price  Int?

//   wishlists    wishlists[]
//   carts        carts[]
//   trx_products trx_products[]
//   images       images[]
// }

// model carts {
//   id         String   @id @default(dbgenerated("gen_random_uuid{}")) @db.Uuid
//   created_at DateTime @default(now()) @db.Timestamp(6)
//   updated_at DateTime @updatedAt @db.Timestamp(6)

//   qty Int

//   product_id String
//   variant_id String

//   product products @relation(references: [id], fields: [product_id], onUpdate: NoAction, onDelete: NoAction)
//   variant variants @relation(references: [id], fields: [variant_id], onUpdate: NoAction, onDelete: NoAction)
// }

// model transactions {
//   id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   created_at DateTime @default(now()) @db.Timestamp(6)
//   updated_at DateTime @updatedAt @db.Timestamp(6)

//   trx_products trx_products[]
// }

// model trx_products {
//   id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   created_at DateTime @default(now()) @db.Timestamp(6)
//   updated_at DateTime @updatedAt @db.Timestamp(6)

//   name        String
//   description String
//   price       Int
//   qty         Int

//   product_id     String
//   variant_id     String
//   transaction_id String
//   image_id       String

//   product     products     @relation(references: [id], fields: [product_id], onUpdate: NoAction, onDelete: NoAction)
//   variant     variants     @relation(references: [id], fields: [variant_id], onUpdate: NoAction, onDelete: NoAction)
//   transaction transactions @relation(references: [id], fields: [transaction_id], onUpdate: NoAction, onDelete: NoAction)
//   image       images       @relation(references: [id], fields: [image_id], onUpdate: NoAction, onDelete: NoAction)
// }

// model wishlists {
//   id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   created_at DateTime @default(now()) @db.Timestamp(6)
//   updated_at DateTime @updatedAt @db.Timestamp(6)

//   product_id String
//   variant_id String
//   user_id    String

//   product products @relation(references: [id], fields: [product_id], onUpdate: NoAction, onDelete: NoAction)
//   variant variants @relation(references: [id], fields: [variant_id], onUpdate: NoAction, onDelete: NoAction)
//   user    users    @relation(references: [id], fields: [user_id], onUpdate: NoAction, onDelete: NoAction)
// }

enum Roles {
  Superuser
  Admin
  User
}

enum Verification {
  Verified
  Unverified
  Rejected
}

enum Gender {
  Male
  Female
}
